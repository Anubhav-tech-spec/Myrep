import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import mysql.connector
import schedule
import time
import asyncio
import websockets
import json

async def handle_data(websocket, path):
    async for message in websocket:
        print("Received message:", message)

start_server = websockets.serve(handle_data, "localhost", 8765)

asyncio.get_event_loop().run_until_complete(start_server)
asyncio.get_event_loop().run_forever()
# Database configuration
DB_CONFIG = {
    'host': 'your_host',
    'user': 'your_username',
    'password': 'your_password',
    'database': 'your_database'
}

# WebSocket configuration
WS_URL = "ws://localhost:8765"  # WebSocket server URL

your_table = pd.read_csv("intraday_5min_IBM.csv")
async def fetch_data_from_db():
    conn = mysql.connector.connect(**DB_CONFIG)
    cursor = conn.cursor()
    query = "SELECT open, high, low, close, volume FROM your_table"
    cursor.execute(query)
    while True:
        # Fetch one row from the cursor
        row = cursor.fetchone()

        # If row is not None, process it
        if row is not None:
            # Process the row...
            print("Processing row:", row)
        else:
            print("No more rows to fetch.")
            break  # Exit the loop if no more rows

        # Wait for 1 minute before fetching the next row
        time.sleep(60)




    # Fetch one row from the cursor
    for i in range(100):
     row = your_table[i]

    # If row is not None, process it
     if row is not None:
        # Process the row...
        print("Processing row:", row)
     else:
        print("No more rows to fetch.")
        break  # Exit the loop if no more rows

    # Wait for 1 minute before fetching the next row
     time.sleep(60)

#     column_names = [i[0] for i in cursor.description]
#     df = pd.DataFrame(row, columns=column_names)
#     cursor.close()
#     conn.close()
#     return df
#
# async def perform_calculations(df):
#     df['MA20'] = df['close'].rolling(window=20).mean()
#     df['STD20'] = df['close'].rolling(window=20).std()
#     df['UpperBand'] = df['MA20'] + (df['STD20'] * 2)
#     df['LowerBand'] = df['MA20'] - (df['STD20'] * 2)
#     df['BuySignal'] = np.where(df['close'] < df['LowerBand'], 1, 0)
#     df['SellSignal'] = np.where(df['close'] > df['UpperBand'], 1, 0)
#     df['Position'] = 0
#     for i in range(1, len(df)):
#         if df['BuySignal'][i] == 1:
#             df['Position'][i] = 1
#         elif df['SellSignal'][i] == 1:
#             df['Position'][i] = -1
#         else:
#             df['Position'][i] = df['Position'][i-1]
#     return df
#
# async def send_data_to_ws(data):
#     async with websockets.connect(WS_URL) as websocket:
#         await websocket.send(json.dumps(data))
#         response = await websocket.recv()
#         print("Data sent to WebSocket and received response:", response)
#
# async def write_data_to_db(df):
#     conn = mysql.connector.connect(**DB_CONFIG)
#     cursor = conn.cursor()
#     for _, row in df.iterrows():
#         sql = """INSERT INTO your_table_with_signals (date, close, UpperBand, LowerBand, BuySignal, SellSignal, Position)
#                  VALUES (%s, %s, %s, %s, %s, %s, %s)
#                  ON DUPLICATE KEY UPDATE
#                  close=VALUES(close), UpperBand=VALUES(UpperBand), LowerBand=VALUES(LowerBand),
#                  BuySignal=VALUES(BuySignal), SellSignal=VALUES(SellSignal), Position=VALUES(Position)"""
#         cursor.execute(sql, tuple(row[['date', 'close', 'UpperBand', 'LowerBand', 'BuySignal', 'SellSignal', 'Position']]))
#     conn.commit()
#     cursor.close()
#     conn.close()
#
# async def job():
#     df = await fetch_data_from_db()
#     df = await perform_calculations(df)
#     await write_data_to_db(df)
#     data_to_send = df.to_dict(orient='records')
#     await send_data_to_ws(data_to_send)
#
# schedule.every(5).minutes.do(lambda: asyncio.run(job()))
#
# while True:
#     schedule.run_pending()
#     time.sleep(1)



